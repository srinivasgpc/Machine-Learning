q()
dataset = read.csv('Data.csv')
dataset = read.csv('Data.csv')
dataset = read.csv('Data.csv')
dataset = read.csv('Data.csv')
dataset = read.csv('Data.csv')
dataset = read.csv('Data.csv')
dataset = read.csv('Data.csv')
dataset = read.csv('Data.csv')
setwd("C:/Users/DELL/PycharmProjects/Code-fix/Machine Learning/Section 4 - Data Preprocessing in R/R")
dataset = read.csv('Data.csv')
datasetAge = ifelse(is.na(dtaset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm =TRUE)),
dataset$Age)
datasetAge = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm =TRUE)),
dataset$Age)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
datasetAge = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm =TRUE)),
dataset$Age)
View(dataset)
View(dataset)
View(dataset)
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm =TRUE)),
dataset$Age)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
dataset$Salary = ifelse(is.na(dataset$Salary), ave(dataset$Salary, FUN = function(x) mean(x, na.rm =TRUE)),
daraset$Salary)
dataset$Salary = ifelse(is.na(dataset$Salary), ave(dataset$Salary, FUN = function(x) mean(x, na.rm =TRUE)),
dataset$Salary)
View(dataset)
dataset$Country = factor(dataset$Country,
levels= c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels= c('NO', 'Yes'),
labels = c(0, 1))
View(dataset)
View(dataset)
dataset$Purchased = factor(dataset$Purchased,
levels= c('NO', 'Yes'),
labels = c(1, 2))
dataset = read.csv('Data.csv')
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm =TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary), ave(dataset$Salary, FUN = function(x) mean(x, na.rm =TRUE)),
dataset$Salary)
dataset$Country = factor(dataset$Country,
levels= c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels= c('NO', 'Yes'),
labels = c(1, 2))
dataset = read.csv('Data.csv')
# Splitting the dataset into the Training set and Test set
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm =TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary), ave(dataset$Salary, FUN = function(x) mean(x, na.rm =TRUE)),
dataset$Salary)
dataset$Country = factor(dataset$Country,
levels= c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels= c('No', 'Yes'),
labels = c(1, 2))
# Importing the dataset
dataset = read.csv('Data.csv')
# Splitting the dataset into the Training set and Test set
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm =TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary), ave(dataset$Salary, FUN = function(x) mean(x, na.rm =TRUE)),
dataset$Salary)
dataset$Country = factor(dataset$Country,
levels= c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels= c('No', 'Yes'),
labels = c(0, 1))
View(dataset)
install.packages('caTools')
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
set.seed(123)
split = sample.split(dataset$Purchased, splitRatio = 0.8)
set.seed(123)
split = sample.split(dataset$Purchased, splitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
set.seed(123)
split = sample.split(dataset$Purchased, splitRatio = 0.8)
install.package("caTools")
install.packages('caTools')
library(caTools)
library(caTools)
set.seed(123)
sample.split
split = sample.split(dataset$Purchased, splitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
set.seed(123)
split = sample.split(dataset$Purchased, splitRatio = 0.8)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
split
datasetAge
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(test_set)
View(test_set)
View(training_set)
View(training_set)
View(dataset)
View(dataset)
View(test_set)
View(training_set)
training_set = scale(training_set)
test_set = scale(test_set)
View(test_set)
View(training_set)
View(test_set)
View(test_set)
View(test_set)
View(training_set)
View(training_set)
training_set[, 2:3] = scale(training_set[, 2:3])
test_set[, 2:3] = scale(test_set[, 2:3])
View(test_set)
View(training_set)
